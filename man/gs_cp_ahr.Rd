% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_cp_ahr.R
\name{gs_cp_ahr}
\alias{gs_cp_ahr}
\title{Conditional power computation under the logrank test}
\usage{
gs_cp_ahr(
  x,
  xu,
  i = 1,
  z_i = 0,
  j = 2,
  z_j = 1.96,
  local_alternative = TRUE,
  info_scale = c("h0_h1_info", "h0_info", "h1_info")
)
}
\arguments{
\item{x}{A original design created by either \code{\link[=gs_design_ahr]{gs_design_ahr()}} or \code{\link[=gs_power_ahr]{gs_power_ahr()}}.}

\item{xu}{A updated design created by either \code{\link[=gs_update_ahr]{gs_update_ahr()}}.}

\item{i}{The index of the current analysis.}

\item{z_i}{The observed Z-score at analysis i.}

\item{j}{The index of the future analysis to calculate conditional power.}

\item{z_j}{The critical value at analysis j.}

\item{local_alternative}{Logical value whether the local alternative hypothesis is used or not.}

\item{info_scale}{Information scale for calculation. Options are:
\itemize{
\item \code{"h0_h1_info"} (default): variance under both null and alternative hypotheses is used.
\item \code{"h0_info"}: variance under null hypothesis is used.
\item \code{"h1_info"}: variance under alternative hypothesis is used.
}}
}
\value{
A list of conditional power under treatment effect of H0, H1, and interim estimation.
}
\description{
Conditional power computation under the logrank test
}
\examples{
library(gsDesign)
library(gsDesign2)
library(dplyr)

# ----------------------------- #
# Design parameters
# ---------------------------- #
alpha <- 0.025
beta <- 0.1
ratio <- 1

# Enrollment
enroll_rate <- define_enroll_rate(
  duration = c(2, 2, 10),
  rate = (1:3) / 3)

# Failure and dropout
fail_rate <- define_fail_rate(
  duration = c(3, Inf), fail_rate = log(2) / 9,
  hr = c(1, 0.6), dropout_rate = .0001)

# IA and FA analysis time
analysis_time <- c(20, 36)

# Randomization ratio
ratio <- 1

# ----------------------------- #
# Original design
# ---------------------------- #
upper <- gs_spending_bound
upar <- list(sf = sfLDOF, total_spend = alpha)
x <- gs_design_ahr(
  enroll_rate = enroll_rate, fail_rate = fail_rate,
  alpha = alpha, beta = beta, ratio = ratio,
  info_scale = "h0_info",
  info_frac = NULL,
  analysis_time = c(12, 24, 36),
  upper = gs_spending_bound, upar = upar,
  lower = gs_b, lpar = rep(-Inf, 3),
  test_upper = TRUE, test_lower = FALSE) |> to_integer()

# ----------------------------- #
# Simulate a dataset to mimic
# observed IA1 data
# ---------------------------- #
set.seed(123)

observed_data <- simtrial::sim_pw_surv(
  n = max(x$analysis$n),
  stratum = data.frame(stratum = "All", p = 1),
  block = c(rep("control", 2), rep("experimental", 2)),
  enroll_rate = x$enroll_rate,
  fail_rate = (fail_rate |> simtrial::to_sim_pw_surv())$fail_rate,
  dropout_rate = (fail_rate |> simtrial::to_sim_pw_surv())$dropout_rate)

observed_data_ia1 <- observed_data |> simtrial::cut_data_by_date(x$analysis$time[1])
observed_event_ia1 <- sum(observed_data_ia1$event)
planned_event_ia1 <- x$analysis$event[1]
planned_event_fa <- x$analysis$event[3]

# ----------------------------- #
# Update design based on
# observed IA1 data
# ---------------------------- #
xu <- gs_update_ahr(
  x = x,
  ustime = c(observed_event_ia1 / planned_event_fa, x$analysis$info_frac[2], 1),
  observed_data = list(observed_data_ia1, NULL, NULL))

# ----------------------------- #
# Calculate conditional power
# ---------------------------- #
gs_cp_ahr(x = x, xu = xu,
          i = 1, z_i = x$bound$z[x$bound$bound == "upper" & x$bound$analysis == 1] - 0.5,
          j = 2, z_j = x$bound$z[x$bound$bound == "upper" & x$bound$analysis == 2],
          local_alternative = TRUE)

gs_cp_ahr(x = x, xu = xu,
          i = 1, z_i = x$bound$z[x$bound$bound == "upper" & x$bound$analysis == 1] - 0.5,
          j = 3, z_j = x$bound$z[x$bound$bound == "upper" & x$bound$analysis == 3],
          local_alternative = TRUE)
}
