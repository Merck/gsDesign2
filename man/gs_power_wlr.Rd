% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_power_wlr.R
\name{gs_power_wlr}
\alias{gs_power_wlr}
\title{Group sequential design power using weighted log rank test under non-proportional hazards}
\usage{
gs_power_wlr(
  enrollRates = tibble(Stratum = "All", duration = c(2, 2, 10), rate = c(3, 6, 9)),
  failRates = tibble(Stratum = "All", duration = c(3, 100), failRate = log(2)/c(9, 18),
    hr = c(0.9, 0.6), dropoutRate = rep(0.001, 2)),
  events = c(30, 40, 50),
  analysisTimes = NULL,
  binding = FALSE,
  upper = gs_b,
  lower = gs_b,
  upar = gsDesign(k = 3, test.type = 1, n.I = c(30, 40, 50), maxn.IPlan = 50, sfu =
    sfLDOF, sfupar = NULL)$upper$bound,
  lpar = c(qnorm(0.1), rep(-Inf, 2)),
  test_upper = TRUE,
  test_lower = TRUE,
  ratio = 1,
  weight = wlr_weight_fh,
  info_scale = c(0, 1, 2),
  approx = "asymptotic",
  r = 18,
  tol = 1e-06
)
}
\arguments{
\item{enrollRates}{enrollment rates}

\item{failRates}{failure and dropout rates}

\item{events}{Targeted events at each analysis}

\item{analysisTimes}{Minimum time of analysis}

\item{binding}{indicator of whether futility bound is binding; default of FALSE is recommended}

\item{upper}{Function to compute upper bound}

\item{lower}{Function to compute lower bound}

\item{upar}{Parameter passed to \code{upper()}}

\item{lpar}{Parameter passed to \code{lower()}}

\item{test_upper}{indicator of which analyses should include an upper (efficacy) bound; single value of TRUE (default) indicates all analyses;
otherwise, a logical vector of the same length as \code{info} should indicate which analyses will have an efficacy bound}

\item{test_lower}{indicator of which analyses should include an lower bound; single value of TRUE (default) indicates all analyses;
single value FALSE indicated no lower bound; otherwise, a logical vector of the same length as \code{info} should indicate which analyses will have a
lower bound}

\item{ratio}{Experimental:Control randomization ratio (not yet implemented)}

\item{weight}{weight of weighted log rank test
\itemize{
\item \code{"1"}=unweighted,
\item \code{"n"}=Gehan-Breslow,
\item \code{"sqrtN"}=Tarone-Ware,
\item \code{"FH_p[a]_q[b]"}= Fleming-Harrington with p=a and q=b
}}

\item{info_scale}{the information scale for calculation}

\item{approx}{approximate estimation method for Z statistics
\itemize{
\item \code{"event driven"} = only work under proportional hazard model with log rank test
\item \code{"asymptotic"}
}}

\item{r}{Integer, at least 2; default of 18 recommended by Jennison and Turnbull}

\item{tol}{Tolerance parameter for boundary convergence (on Z-scale)}
}
\description{
Group sequential design power using weighted log rank test under non-proportional hazards
}
\section{Specification}{

\if{latex}{
 \itemize{
   \item Compute information and effect size for Weighted Log-rank test using \code{gs_info_wlr()}.
   \item Compute group sequential bound computation with non-constant effect using \code{gs_power_npe()}.
   \item Combine information and effect size and power and return a
   tibble  with columns Analysis, Bound, Time, Events, Z, Probability, AHR,  theta, info, and info0.
  }
}
\if{html}{The contents of this section are shown in PDF user manual only.}
}

\examples{
library(tibble)
library(gsDesign)
library(gsDesign2)

# set enrollment rates
enrollRates <- tibble(Stratum = "All", duration = 12, rate = 500/12)

# set failure rates
failRates <- tibble(
  Stratum = "All",
  duration = c(4, 100),
  failRate = log(2) / 15,  # median survival 15 month
  hr = c(1, .6),
  dropoutRate = 0.001)
  
# set the targeted number of events and analysis time
target_events <- c(30, 40, 50)
target_analysisTime <- c(10, 24, 30)

# -------------------------#
#       example 1          #
# ------------------------ #
# fixed bounds and calculate the power for targeted number of events
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = target_events,
  analysisTimes = NULL,
  upper = gs_b,
  upar = gsDesign(k = length(target_events), test.type = 1, n.I = target_events, maxn.IPlan = max(target_events), sfu = sfLDOF, sfupar = NULL)$upper$bound,
  lower = gs_b,
  lpar = c(qnorm(.1), rep(-Inf, 2)))
  
# -------------------------#
#       example 2          #
# ------------------------ #
# fixed bounds and calculate the power for targeted analysis time
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = NULL,
  analysisTimes = target_analysisTime,
  upper = gs_b,
  upar = gsDesign(k = length(target_events), test.type = 1, n.I = target_events, maxn.IPlan = max(target_events), sfu = sfLDOF, sfupar = NULL)$upper$bound,
  lower = gs_b,
  lpar = c(qnorm(.1), rep(-Inf, 2)))

# -------------------------#
#       example 3          #
# ------------------------ #
# fixed bounds and calculate the power for targeted analysis time & number of events
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = target_events,
  analysisTimes = target_analysisTime,
  upper = gs_b,
  upar = gsDesign(k = length(target_events), test.type = 1, n.I = target_events, maxn.IPlan = max(target_events), sfu = sfLDOF, sfupar = NULL)$upper$bound,
  lower = gs_b,
  lpar = c(qnorm(.1), rep(-Inf, 2)))
  
# -------------------------#
#       example 4          #
# ------------------------ #
# spending bounds and calculate the power for targeted number of events
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = target_events,
  analysisTimes = NULL,
  upper = gs_spending_bound,
  upar = list(sf = gsDesign::sfLDOF, total_spend = 0.025),
  lower = gs_spending_bound,
  lpar = list(sf = gsDesign::sfLDOF, total_spend = 0.2))
  
# -------------------------#
#       example 5          #
# ------------------------ #
# spending bounds and calculate the power for targeted analysis time
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = NULL,
  analysisTimes = target_analysisTime,
  upper = gs_spending_bound,
  upar = list(sf = gsDesign::sfLDOF, total_spend = 0.025),
  lower = gs_spending_bound,
  lpar = list(sf = gsDesign::sfLDOF, total_spend = 0.2))
  
# -------------------------#
#       example 6          #
# ------------------------ #
# spending bounds and calculate the power for targeted analysis time & number of events
gs_power_wlr(
  enrollRates = enrollRates,
  failRates = failRates,
  events = target_events,
  analysisTimes = target_analysisTime,
  upper = gs_spending_bound,
  upar = list(sf = gsDesign::sfLDOF, total_spend = 0.025),
  lower = gs_spending_bound,
  lpar = list(sf = gsDesign::sfLDOF, total_spend = 0.2))
  
}
